Our program will process at most MAXN characters, which it stores in the array c: #define MAXN 5000000char c[MAXN], *a[MAXN];

We'll use a simple data structure known as a ``suffix array''; the structure has been used at least since the 1970's, though the term was introduced in the 1990's. 
The structure is an array a of pointers to characters. As we read the input, we initialize a so that each element points to the corresponding character in the input string: while (ch = getchar()) != EOF    a[n] = &c[n]    c[n++] = chc[n] = 0
The final element of c contains a null character, which terminates all strings. The element a[0] points to the entire string; the next element points to the suffix of the array beginning with the second character, and so on. On the input string ``banana'', the array will represent these suffixes: a[0]: bananaa[1]: ananaa[2]: nanaa[3]: anaa[4]: naa[5]: a
The pointers in the array a together point to every suffix in the string, hence the name ``suffix array''. If a long string occurs twice in the array c, it appears in two different suffixes. We will therefore sort the array to bring together equal suffixes (just as sorting brought together anagrams in Section 2.4). The ``banana'' array sorts to a[0]: aa[1]: anaa[2]: ananaa[3]: bananaa[4]: naa[5]: nana
We can then scan through this array comparing adjacent elements to find the longest repeated string, which in this case is ``ana''. We'll sort the suffix array with the qsort function: qsort(a, n, sizeof(char *), pstrcmp) The pstrcmp comparison function adds one level of indirection to the library strcmp function. This scan through the array uses the comlen function to count the number of letters that two adjacent words have in common: for i = [0, n)    if comlen(a[i], a[i+1]) > maxlen        maxlen = comlen(a[i], a[i+1])        maxi = iprintf("%.*s\n", maxlen, a[maxi])The printf statement uses the ``*'' precision to print maxlen characters of the string. I ran the resulting program to find the longest repeated string in the 807,503 characters in Samuel Butler's translation of Homer's Iliad. The program took 4.8 seconds to locate this string: whose sake so many of the Achaeans have died at Troy, far from their homes? Go about at once among the host, and speak fairly to them, man by man, that they draw not their ships into the sea. The text first occurs when Juno suggests it to Minerva as an argument that might keep the Greeks (Achaeans) from departing from Troy; it occurs shortly thereafter when Minerva repeats the argument verbatim to Ulysses. On this and other typical text files of n characters, the algorithm runs in O(n log n) time, due to sorting. 